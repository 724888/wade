package main

import "fmt"

const (
	CreateElementOpener    = "vdom.NewElement"
	CreateTextNodeOpener   = "vdom.NewTextNode"
	CreateComElementOpener = "vdom.NewComElement"
	AttributeMapOpener     = "vdom.Attributes"
	NodeTypeName           = "vdom.Node"
	NodeListOpener         = "[]vdom.Node"
	RenderFuncOpener       = "func %vRender(stateData interface{}) *vdom.Element "
	RenderEmbedString      = "(this %v) "
	ComponentDataOpener    = "wade.Com"
)

func domElType(elTag string) (string, string) {
	switch elTag {
	case "input":
		return "vdom.DOMInputEl", "wade.DOM().ToInputEl"
	}

	return "vdom.DOMNode", ""
}

func valueToStringCode(vcode string) string {
	return fmt.Sprintf(`wade.Str(%v)`, vcode)
}

func componentSetStateCode(sField, sType string) string {
	return fmt.Sprintf("if stateData != nil { this.%v = stateData.(%v) }", sField, sType)
}

func componentRefsVarCode(comName string) string {
	return fmt.Sprintf("refs := this.Com.InternalRefsHolder.(*%vRefs)", comName)
}

func componentSetRefCode(refName string, varName string, elTag string) string {
	_, elMk := domElType(elTag)
	return fmt.Sprintf("%v.OnRendered = func(dNode vdom.DOMNode) { refs.%v = %v(dNode) }",
		varName, refName, elMk)
}

func Prelude(pkgName string) string {
	return `package ` + pkgName + `

// THIS FILE IS AUTOGENERATED BY WADE.GO FUEL
// CHANGES WILL BE OVERWRITTEN, PLEASE DUN
import (
	"fmt"

	"github.com/gowade/wade/vdom"
	"github.com/gowade/wade"
)

func init() {
	_, _, _ = fmt.Printf, vdom.NewElement, wade.Str
}

`
}
