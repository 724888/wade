package main

import (
	"fmt"
	"strings"

	"github.com/gowade/html"
)

var (
	nilCode = &codeNode{
		typ:  NakedCodeNode,
		code: "nil",
	}
)

func componentInstCode(com componentInfo, uNode *html.Node, instChildren *codeNode) (*codeNode, error) {
	fields := make([]*codeNode, 0, len(com.argFields)+1)
	instChildren.code = fmt.Sprintf("Children: %v", instChildren.code)
	fields = append(fields, &codeNode{
		typ:  CompositeCodeNode,
		code: "Com: " + ComponentDataOpener,
		children: []*codeNode{
			{
				typ:  NakedCodeNode,
				code: fmt.Sprintf(`Name: "%v"`, com.name),
			},
			instChildren,
		},
	})

	for _, attr := range uNode.Attr {
		if com.argFields[attr.Key] {
			vcode := attributeValueCode(parseTextMustache(attr.Val))
			fields = append(fields, &codeNode{
				typ:  NakedCodeNode,
				code: fmt.Sprintf("%v: %v", attr.Key, vcode),
			})

			continue
		}

		return nil, fmt.Errorf(`Invalid field "%v" for component %v`, attr.Key, com.name)
	}

	typeIns := com.name
	return &codeNode{
		typ:  FuncCallCodeNode,
		code: CreateComElementOpener,
		children: []*codeNode{
			{
				typ:  StringCodeNode,
				code: com.name,
			},
			{
				typ:      CompositeCodeNode,
				code:     typeIns,
				children: fields,
			},
		},
	}, nil
}

func textNodeCode(text string) []*codeNode {
	parts := parseTextMustache(text)
	ret := make([]*codeNode, len(parts))

	for i, part := range parts {
		var cn *codeNode
		if part.isMustache {
			cn = ncn(fmt.Sprintf("fmt.Sprint(%v)", part.content))
		} else {
			cn = &codeNode{
				typ:  StringCodeNode,
				code: part.content,
			}
		}

		ret[i] = &codeNode{
			typ:      FuncCallCodeNode,
			code:     CreateTextNodeOpener,
			children: []*codeNode{cn},
		}
	}

	return ret
}

func attributeValueCode(parts []textPart) string {
	if len(parts) == 1 {
		p0 := parts[0]
		if p0.isMustache {
			return p0.content
		} else {
			return "`" + p0.content + "`"
		}
	}

	fmtStr := ""
	mustaches := []string{}
	for _, part := range parts {
		if part.isMustache {
			fmtStr += "%v"
			mustaches = append(mustaches, part.content)
		} else {
			fmtStr += part.content
		}
	}

	mStr := strings.Join(mustaches, ", ")
	return fmt.Sprintf("fmt.Sprintf(`%v`, %v)", fmtStr, mStr)
}

func mapFieldAssignmentCode(field string, value string) string {
	return fmt.Sprintf(`"%v": %v`, field, value)
}

func elementAttrsCode(attrs []html.Attribute) *codeNode {
	if len(attrs) == 0 {
		return nilCode
	}

	assignments := make([]*codeNode, len(attrs))
	for i, attr := range attrs {
		valueCode := attributeValueCode(parseTextMustache(attr.Val))
		assignments[i] = &codeNode{
			typ:  NakedCodeNode,
			code: mapFieldAssignmentCode(attr.Key, valueCode),
		}
	}

	return &codeNode{
		typ:      CompositeCodeNode,
		code:     AttributeMapOpener,
		children: assignments,
	}
}

func chAppend(a *[]*codeNode, b []*codeNode) {
	for _, item := range b {
		if item != nil {
			*a = append(*a, item)
		}
	}
}

// Filter out text nodes that are just garbage space-only text node (i.e "\n\t\t\t\t")
// generated by the html parser
//
// Remove those nodes entirely for those that are at the beginning and the end of
// parent elements. Turn others into just a space.
func filterTextStrings(list []*codeNode) []*codeNode {
	for i, item := range list {
		if item.typ == FuncCallCodeNode && len(item.children) == 1 {
			s := item.children[0]
			if s.typ == StringCodeNode && strings.TrimSpace(s.code) == "" {
				if i == 0 || i == len(list)-1 {
					list[i] = nil
				} else {
					s.code = " "
				}
			}
		}
	}

	ret := make([]*codeNode, 0, len(list))
	for _, item := range list {
		if item != nil {
			ret = append(ret, item)
		}
	}

	return ret
}
