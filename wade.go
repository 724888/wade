package wade

import (
	"github.com/gopherjs/gopherjs/js"
	"github.com/gowade/wade/vdom"
	"github.com/gowade/wade/vdom/browser"
)

func MakeCom(name string, children []vdom.Node) Com {
	return Com{
		Name:     name,
		Children: children,
	}
}

type Com struct {
	Name string
	//vNode    *vdom.Element
	Children []vdom.Node

	InternalRefsHolder interface{} // please don't touch, this is for use by Fuel's generated code
}

func (c Com) InternalState() interface{} {
	return nil
}

//func (c Com) InternalSetState(sd interface{}) {}

type Component interface {
	Render(interface{}) *vdom.Element

	// please don't touch, these methods will be autogenerated by Fuel and for use by Wade's internal code
	//InternalComPtr() *Com
	//InternalNewRefsHolder() interface{}
	//InternalSetRef(string, *vdom.Element)
	//InternalSetState(interface{})
	InternalState() interface{}
}

func CreateComponent(com Component) *vdom.Element {
	//comPtr := com.InternalComPtr()
	//comPtr.InternalRefsHolder = com.InternalNewRefsHolder()
	elem := com.Render(com.InternalState())
	//comPtr.vNode = elem
	return elem
}

var (
	gCache *vdom.Element
)

func Render(tree *vdom.Element, elemId string) {
	elem := js.Global.Get("document").Call("getElementById", elemId)
	browser.PerformDiff(tree, gCache, elem)
	gCache = tree
}
